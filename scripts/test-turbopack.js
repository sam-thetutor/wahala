#!/usr/bin/env node

/**
 * Test script to verify Turbopack configuration
 * Run with: node scripts/test-turbopack.js
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Testing Enhanced Turbopack Configuration...\n');

// Check if next.config.ts exists and has turbopack config
const configPath = path.join(process.cwd(), 'next.config.ts');
if (fs.existsSync(configPath)) {
  console.log('‚úÖ next.config.ts found');
  
  const configContent = fs.readFileSync(configPath, 'utf8');
  if (configContent.includes('turbopack:')) {
    console.log('‚úÖ Turbopack configuration found');
    
    // Check for specific optimizations
    if (configContent.includes('resolveAlias')) {
      console.log('‚úÖ Path aliases configured');
    }
    
    if (configContent.includes('optimizePackageImports')) {
      console.log('‚úÖ Package import optimization enabled');
    }
    
    if (configContent.includes('reactCompiler: true')) {
      console.log('‚úÖ React compiler enabled');
    }
    
    if (configContent.includes('serverComponentsHmrCache: true')) {
      console.log('‚úÖ Server components HMR cache enabled');
    }
    
    if (configContent.includes('compress: true')) {
      console.log('‚úÖ Compression enabled');
    }
    
    if (configContent.includes('images:')) {
      console.log('‚úÖ Image optimization configured');
    }
  } else {
    console.log('‚ùå Turbopack configuration missing');
  }
} else {
  console.log('‚ùå next.config.ts not found');
}

// Check package.json scripts
const packagePath = path.join(process.cwd(), 'package.json');
if (fs.existsSync(packagePath)) {
  const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
  const scripts = packageJson.scripts || {};
  
  if (scripts.dev && scripts.dev.includes('--turbopack')) {
    console.log('‚úÖ Dev script includes --turbopack flag');
  } else {
    console.log('‚ùå Dev script missing --turbopack flag');
  }
  
  if (scripts['dev:next'] && scripts['dev:next'].includes('--turbopack')) {
    console.log('‚úÖ dev:next script includes --turbopack flag');
  } else {
    console.log('‚ùå dev:next script missing --turbopack flag');
  }
} else {
  console.log('‚ùå package.json not found');
}

// Check TypeScript configuration
const tsConfigPath = path.join(process.cwd(), 'tsconfig.json');
if (fs.existsSync(tsConfigPath)) {
  const tsConfig = JSON.parse(fs.readFileSync(tsConfigPath, 'utf8'));
  const paths = tsConfig.compilerOptions?.paths || {};
  
  if (paths['@/*']) {
    console.log('‚úÖ TypeScript path mapping configured (@/*)');
  } else {
    console.log('‚ùå TypeScript path mapping missing');
  }
} else {
  console.log('‚ùå tsconfig.json not found');
}

// Check for performance packages
const dependencies = packageJson?.dependencies || {};
const devDependencies = packageJson?.devDependencies || {};
const allDeps = { ...dependencies, ...devDependencies };

if (allDeps['next'] && allDeps['next'].startsWith('15')) {
  console.log('‚úÖ Next.js 15.x detected (Turbopack ready)');
} else {
  console.log('‚ö†Ô∏è  Next.js version may not support all Turbopack features');
}

console.log('\nüöÄ To start development with Turbopack:');
console.log('   pnpm dev');
console.log('   pnpm dev:next');
console.log('\nüìä Performance Features Enabled:');
console.log('   ‚Ä¢ Fast module resolution with aliases');
console.log('   ‚Ä¢ Package import optimization');
console.log('   ‚Ä¢ React compiler for better performance');
console.log('   ‚Ä¢ Server components HMR cache');
console.log('   ‚Ä¢ Image format optimization');
console.log('   ‚Ä¢ Compression for production builds');
console.log('\nüìö For more info, see: https://nextjs.org/docs/app/building-your-application/routing/colocation');
